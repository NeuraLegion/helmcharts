{{- $repeaterIDs := (or (and (hasKey .Values "global") (hasKey .Values.global "repeaterIDs") .Values.global.repeaterIDs) (compact (list .Values.repeaterID))) }}
{{- if eq (len $repeaterIDs) 0 }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-ssl-protocols: "TLSv1.1 TLSv1.2"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "75s"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "360s"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "360s"
    nginx.ingress.kubernetes.io/auth-keepalive-requests: "90"
    nginx.ingress.kubernetes.io/auth-keepalive-timeout: "5"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      keepalive_requests 90;
      keepalive_time 5s;
    {{ if eq .Values.ingress.cert "" }}
    cert-manager.io/cluster-issuer: letsencrypt-cf-prod
    {{ end }}
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - {{ .Values.ingress.url }}
      secretName: {{ if eq .Values.ingress.cert "" }}distributorwildcard{{ else }}{{ .Values.ingress.cert }}{{ end }}
  rules:
    - host: {{ .Values.ingress.url }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ .Release.Name }}
                port:
                  number: 80
{{- end }}
